# An initial version of this script was generated by ChatGPT-4 from the prompt below. Given this
# code is the output of ChatGPT-4 with human revision, we do not claim copyright and this script is
# not covered by the same license as the rest of the repository.
#
# ----------------------------------------------
# Please write a Python script to take a file of daily sequence counts of
# SARS-CoV-2 Pango lineages alongside an aliasing file to produce an updated
# counts file of collapsed Pango lineages. The daily counts file is named
# `prepared_seq_counts.tsv` and should be passed into the script via
# `--seq-counts`. This file looks like:
# ```
# location	variant	date	sequences
# USA	BA.2.3.20	2022-11-27	8
# USA	BA.2.3.20	2022-11-28	19
# USA	BA.2.3.20	2022-11-29	13
# USA	BA.2.3.20	2022-11-30	10
# USA	BQ.1.23	2022-12-08	32
# USA	EE.1	2022-12-09	10
# USA	XBB.1.5.33	2023-01-31	15
# ...
# ```
# where the column `sequences` represents count of sequences for a
# particular `variant` at a particular `location` on a particular `date`. The
# aliasing file is named `pango_aliasing.tsv` and should be passed into the
# script via `--aliasing`. This file looks like:
# ```
# seqName	clade	Nextclade_pango	partiallyAliased
# BA.2	21L	BA.2	BA.2
# BA.2.3.20	21L	BA.2.3.20	BA.2.3.20
# BQ.1.23	22E	BQ.1.23	BA.5.3.1.1.1.1.1.23
# EE.1	22E	EE.1	BA.5.3.1.1.1.1.1.1.4.1
# XBB.1.5.33	23A	XBB.1.5.33	XBB.1.5.33
# ```
# where the column `Nextclade_pango` in the aliasing file corresponds to the
# column `variant` in the sequence counts file.
#
# The first step of the script is to replace entries in sequence counts with
# `partiallyAliased` entry from the aliasing file. These `partiallyAliased`
# entries are expanded lineage notation such that BA.5.3.1.1.1.1.1 is the parent
# of lineage BA.5.3.1.1.1.1.1.23 and so forth.
#
# The next step of the script is to collapse lineages below a count threshold
# into their parent lineage. This integer count threshold is passed into the
# script via `--threshold`. This count threshold represents the total count for a
# particular lineage, ie it's the sum of `sequences` for a particular `variant`
# across `location` and `date` rows. For example, if the total count across
# `location` entries and `date` entries for BA.5.3.1.1.1.1.1.23 is below this
# threshold, then the `sequences` count will be added to the entries for
# corresponding `location` and `date` for parent lineage BA.5.3.1.1.1.1.1. If a
# lineage is below the threshold and has no parent lineage, ie XBB has no parent
# lineage, then collapse to a shared `other` lineage instead. Please print to
# terminal the remaining lineages and counts on each iteration of the collapse
# step.
#
# This collapsing step should be iterated multiple times until no lineages
# remain that are under the threshold count. The next step of the script is to
# de-alias entries and convert back to `Nextclade_pango` form.
# ----------------------------------------------
#
# After this initial prompt, there was a bit of clean up to change name of `threshold` variable, to
# change name of `output` variable and a bit of dialog to remind GPT about the need to convert empty
# strings to `other` and also to aggregate the `sequences` column for each unique combination of
# `location`, `variant`, and `date`. However, following this initial script we revised the script
# substantially to use pango_aliasor instead to get parent lineages.

import argparse
import pandas as pd
from pango_aliasor.aliasor import Aliasor

def get_low_count_lineages(seq_counts: pd.DataFrame, collapse_threshold: int) -> set:
    total_counts = seq_counts.groupby("variant")["sequences"].sum()
    low_count_lineages = set(total_counts[total_counts < collapse_threshold].index.to_list())
    low_count_lineages.discard("other")
    return low_count_lineages

def lineage_depth(lineage: str, aliasor: Aliasor) -> int:
    return len(aliasor.uncompress(lineage).split("."))

def collapse_lineages(seq_counts, collapse_threshold, aliasor: Aliasor):
    print("Starting variants:", len(seq_counts.groupby("variant")))
    print(seq_counts.variant.unique())

    low_count_lineages = get_low_count_lineages(seq_counts, collapse_threshold)

    # Find max depth of lineage tree
    max_lineage_depth = max(map(lambda x: lineage_depth(x, aliasor), low_count_lineages))

    # Collapse lineages from highest depth to lowest depth
    for depth in range(max_lineage_depth, 0, -1):
        low_count_lineages_at_depth = set()
        for lineage in low_count_lineages:
            if lineage_depth(lineage, aliasor) == depth:
                low_count_lineages_at_depth.add(lineage)
                parent = aliasor.parent(lineage)
                if parent == "":
                    parent = "other"
                seq_counts.loc[seq_counts["variant"] == lineage, "variant"] = parent
        print("At depth", depth, "there are", len(low_count_lineages_at_depth), "low count lineages")
        print(low_count_lineages_at_depth)

        low_count_lineages = get_low_count_lineages(seq_counts, collapse_threshold)

    print("Ending variants:", len(seq_counts.groupby("variant")))
    print(seq_counts.variant.unique())

    return seq_counts

def aggregate_counts(seq_counts):
    return seq_counts.groupby(["location", "variant", "date"], as_index=False)["sequences"].sum()

def sort_output(seq_counts):
    return seq_counts.sort_values(["variant", "date"])

def save_seq_counts(seq_counts, output_file):
    seq_counts.to_csv(output_file, sep="\t", index=False)

def main():
    parser = argparse.ArgumentParser(description = "Given input sequence counts and \
        Pango aliasing file, collapse Pango lineages into their parental lineages \
        based on supplied threshold and output a new sequence counts file")
    parser.add_argument("--seq-counts", type=str, required=True, help="input TSV of sequence counts")
    parser.add_argument("--collapse-threshold", type=int, default=1000, help="threshold count to collapse lineage into parental lineage")
    parser.add_argument("--output-seq-counts", type=str, required=True, help="output TSV of collapsed sequence counts")
    args = parser.parse_args()

    seq_counts = pd.read_csv(args.seq_counts, sep="\t")

    # Automatically downloads aliasing file from github, needs internet connection
    # File is sourced from https://github.com/cov-lineages/pango-designation/blob/master/pango_designation/alias_key.json
    aliasor: Aliasor = Aliasor()

    seq_counts = collapse_lineages(seq_counts, args.collapse_threshold, aliasor)
    seq_counts = aggregate_counts(seq_counts)
    seq_counts = sort_output(seq_counts)

    save_seq_counts(seq_counts, args.output_seq_counts)

if __name__ == "__main__":
    main()
